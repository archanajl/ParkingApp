{"ast":null,"code":"var _jsxFileName = \"/Users/revad/Documents/Personal/ParkingApp/src/components/Parking.js\";\nimport React from 'react';\nimport Header from './Header';\nimport ParkingSlots from './ParkingSlots';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Parking extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.slotChanged = (SourceIndex, DestinationIndex) => {\n      const Myslots = [...this.state.slots];\n      const Destinationslot = Myslots[DestinationIndex];\n      Myslots.splice(DestinationIndex, 1, Myslots[SourceIndex]);\n      Myslots.splice(SourceIndex, 1, Destinationslot);\n      this.setState({\n        slots: Myslots\n      });\n    };\n\n    this.removeAllOptions = this.removeAllOptions.bind(this);\n    this.addNewOption = this.addNewOption.bind(this);\n    this.addNewCard = this.addNewCard.bind(this);\n    this.removeAnOption = this.removeAnOption.bind(this);\n    this.addNewFavorite = this.addNewFavorite.bind(this);\n    this.removeFavorite = this.removeFavorite.bind(this);\n    this.slotChanged = this.slotChanged.bind(this);\n    this.state = {\n      slots: [1, 5, 7, 15, 30],\n      favorites: [],\n      showNewCard: false\n    };\n  }\n\n  removeAllOptions() {\n    this.setState(() => ({\n      slots: []\n    }));\n  }\n\n  removeAnOption(optionToRemove) {\n    this.setState(prevState => ({\n      slots: prevState.slots.filter(slot => {\n        return optionToRemove !== slot;\n      })\n    }));\n  }\n\n  removeFavorite(favoriteToRemove) {\n    this.setState(prevState => ({\n      favorites: prevState.favorites.filter(favorite => {\n        return favoriteToRemove !== favorite;\n      })\n    }));\n  }\n\n  addNewOption(slot) {\n    slot = Number(slot);\n\n    if (!slot || slot === 0) {\n      return 'Enter a valid slot';\n    } else if (this.state.slots.indexOf(slot) > -1) {\n      return 'This slot already exists';\n    }\n\n    const sortSlots = this.state.slots;\n    sortSlots.splice(_.sortedIndex(sortSlots, slot), 0, slot);\n    this.setState(prevState => ({\n      slots: sortSlots,\n      favorites: prevState.favorites.concat(slot),\n      showNewCard: !prevState.showNewCard\n    }));\n  }\n\n  addNewFavorite(favorite) {\n    if (!favorite) {\n      return 'Enter a valid slot';\n    } else if (this.state.favorites.indexOf(favorite) > -1) {\n      return 'This favorite is already set';\n    }\n\n    this.setState(prevState => ({\n      favorites: prevState.favorites.concat(favorite)\n    }));\n  }\n\n  addNewCard() {\n    this.setState(prevState => ({\n      showNewCard: !prevState.showNewCard\n    }));\n  }\n\n  render() {\n    const {\n      favorites,\n      slots,\n      showNewCard\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Parking\",\n        subtitle: \"Planning Period\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(ParkingSlots, {\n            handleNewOption: this.addNewOption,\n            handleDelete: this.removeAllOptions,\n            handleDeleteAnOption: this.removeAnOption,\n            handleFavDelete: this.removeFavorite,\n            handleAddFavorite: this.addNewFavorite,\n            addNewCard: this.addNewCard,\n            slotChanged: this.slotChanged,\n            favorites: favorites,\n            slots: slots,\n            showNewCard: showNewCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nParking.defaultProps = {\n  slots: [1, 5, 7, 30],\n  favorites: [],\n  showNewCard: false\n};\nexport default Parking;","map":{"version":3,"sources":["/Users/revad/Documents/Personal/ParkingApp/src/components/Parking.js"],"names":["React","Header","ParkingSlots","Card","CardContent","_","Parking","Component","constructor","props","slotChanged","SourceIndex","DestinationIndex","Myslots","state","slots","Destinationslot","splice","setState","removeAllOptions","bind","addNewOption","addNewCard","removeAnOption","addNewFavorite","removeFavorite","favorites","showNewCard","optionToRemove","prevState","filter","slot","favoriteToRemove","favorite","Number","indexOf","sortSlots","sortedIndex","concat","render","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Header from './Header'\nimport ParkingSlots from './ParkingSlots'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport _ from 'lodash';\n\nclass Parking extends React.Component {\n    constructor(props) {\n        super(props);\n        this.removeAllOptions = this.removeAllOptions.bind(this);\n        this.addNewOption = this.addNewOption.bind(this);\n        this.addNewCard = this.addNewCard.bind(this);\n        this.removeAnOption = this.removeAnOption.bind(this);\n        this.addNewFavorite = this.addNewFavorite.bind(this);\n        this.removeFavorite = this.removeFavorite.bind(this);\n        this.slotChanged = this.slotChanged.bind(this);\n        this.state = {\n            slots: [1, 5, 7, 15, 30],\n            favorites: [],\n            showNewCard: false\n        }\n    }\n\n\n    slotChanged = (SourceIndex, DestinationIndex) => {\n        const Myslots = [...this.state.slots]\n        const Destinationslot = Myslots[DestinationIndex]\n        Myslots.splice(DestinationIndex, 1, Myslots[SourceIndex])\n        Myslots.splice(SourceIndex , 1, Destinationslot)\n        this.setState({ slots: Myslots })\n    }\n\n\n\n    removeAllOptions() {\n        this.setState(() => ({ slots: [] }))\n    }\n\n    removeAnOption(optionToRemove) {\n\n        this.setState((prevState) => ({\n            slots: prevState.slots.filter((slot) => {\n                return optionToRemove !== slot;\n            })\n        }))\n\n    }\n\n    removeFavorite(favoriteToRemove) {\n\n        this.setState((prevState) => ({\n            favorites: prevState.favorites.filter((favorite) => {\n                return favoriteToRemove !== favorite;\n            })\n        }))\n\n    }\n\n\n    addNewOption(slot) {\n        slot = Number(slot)\n        if (!slot || slot === 0) {\n            return 'Enter a valid slot';\n        }\n        else if (this.state.slots.indexOf(slot) > -1) {\n            return 'This slot already exists';\n        }\n        const sortSlots = this.state.slots\n        sortSlots.splice(_.sortedIndex(sortSlots, slot), 0, slot)\n        this.setState((prevState) => ({\n            slots: sortSlots,\n            favorites: prevState.favorites.concat(slot),\n            showNewCard: !prevState.showNewCard\n        }))\n\n    }\n\n    addNewFavorite(favorite) {\n        if (!favorite) {\n            return 'Enter a valid slot';\n        }\n        else if (this.state.favorites.indexOf(favorite) > -1) {\n            return 'This favorite is already set';\n        }\n        this.setState((prevState) => ({ favorites: prevState.favorites.concat(favorite) }))\n    }\n\n    addNewCard() {\n        this.setState((prevState) => ({ showNewCard: !prevState.showNewCard }))\n    }\n\n\n    render() {\n        const { favorites, slots, showNewCard } = this.state\n        return (\n            <div>\n                <Header title='Parking' subtitle='Planning Period' />\n                <Card>\n                    <CardContent>\n                        <ParkingSlots\n                            handleNewOption={this.addNewOption}\n                            handleDelete={this.removeAllOptions}\n                            handleDeleteAnOption={this.removeAnOption}\n                            handleFavDelete={this.removeFavorite}\n                            handleAddFavorite={this.addNewFavorite}\n                            addNewCard={this.addNewCard}\n                            slotChanged={this.slotChanged}\n                            favorites={favorites}\n                            slots={slots}\n                            showNewCard={showNewCard}\n                        />\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nParking.defaultProps = {\n    slots: [1, 5, 7, 30],\n    favorites: [],\n    showNewCard: false\n}\n\n\nexport default Parking\n\n"]},"metadata":{},"sourceType":"module"}